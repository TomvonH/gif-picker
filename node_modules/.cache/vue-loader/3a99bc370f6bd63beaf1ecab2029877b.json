{"remainingRequest":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/src/views/About.vue?vue&type=style&index=0&id=039c5b43&scoped=true&lang=css&","dependencies":[{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/src/views/About.vue","mtime":1592389077491},{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/css-loader/dist/cjs.js","mtime":1592310892988},{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1592310893175},{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/postcss-loader/src/index.js","mtime":1586354046333},{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/cache-loader/dist/cjs.js","mtime":1592310891047},{"path":"/Users/tom/Documents/Jobs/WorkStateAssessment/search-page/node_modules/vue-loader/lib/index.js","mtime":1592310893175}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmdpZi1jb250YWluZXIgewogIGhlaWdodDogMjAwcHg7CiAgYmFja2dyb3VuZDogYmxhY2s7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LXdyYXA6IG5vLXdyYXA7Cn0KaW1nIHsKICBvcGFjaXR5OiAwLjM7Cn0K"},{"version":3,"sources":["About.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"About.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"about\">\n    <h1>This is the gif searchpage</h1>\n    <input v-model=\"searchTerm\" type=\"text\" />\n    <button class=\"button\" @click=\"getGifs()\">Search</button>\n    <Pagination\n      :current-page=\"currentPage\"\n      :page-count=\"pageCount\"\n      class=\"articles-list__pagination\"\n      @nextPage=\"pageChangeHandle('next')\"\n      @previousPage=\"pageChangeHandle('previous')\"\n    />\n    <div class=\"gif-container\">\n      <img v-for=\"gif in gifs\" :src=\"gif\" :key=\"gif.id\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from \"axios\";\nimport Pagination from \"../components/Pagination\";\nexport default {\n  components: {\n    Pagination\n  },\n  static: {\n    visibleItemsPerPageCount: 5,\n    apiKey: \"rWqXP4sGGTHujRmCN1osOoCEQEBOWibd\",\n    searchEndPoint: \"https://api.giphy.com/v1/gifs/search?\"\n  },\n  data() {\n    return {\n      searchTerm: \"\",\n      gifs: [],\n      pageCount: 0,\n      currentPage: 1\n    };\n  },\n  async mounted() {\n    let url = `${this.$options.static.searchEndPoint}&api_key=${this.$options.static.apiKey}&q=security&limit=${this.$options.static.visibleItemsPerPageCount}`;\n\n    await axios\n      .get(url)\n      .then(response => {\n        console.log(response.data);\n        this.buildGifs(response.data);\n      })\n      .catch(error => console.log(error));\n  },\n  methods: {\n    getGifs() {\n      let url = `${this.$options.static.searchEndPoint}&api_key=${this.$options.static.apiKey}&q=${this.searchTerm}&limit=${this.$options.static.visibleItemsPerPageCount}`;\n\n      axios\n        .get(url)\n        .then(response => {\n          console.log(response.data);\n          this.buildGifs(response.data);\n          this.pageCount = Math.ceil(\n            response.data.pagination.total_count /\n              this.$options.static.visibleItemsPerPageCount\n          );\n          console.log(this.pageCount);\n        })\n        .catch(error => console.log(error));\n    },\n\n    buildGifs(json) {\n      this.gifs = json.data\n        .map(gif => gif.id)\n        .map(gifId => {\n          return `https://media.giphy.com/media/${gifId}/200_s.gif`;\n        });\n    },\n\n    pageChangeHandle(value) {\n      switch (value) {\n        case \"next\":\n          this.currentPage += 1;\n          break;\n        case \"previous\":\n          this.currentPage -= 1;\n          break;\n        default:\n          this.currentPage = value;\n      }\n      let offset =\n        (this.currentPage - 1) * this.$options.static.visibleItemsPerPageCount;\n      let url = `${this.$options.static.searchEndPoint}&api_key=${this.$options.static.apiKey}&q=${this.searchTerm}&limit=${this.$options.static.visibleItemsPerPageCount}&offset=${offset}`;\n\n      axios\n        .get(url)\n        .then(response => {\n          this.buildGifs(response.data);\n        })\n        .catch(error => console.log(error));\n    }\n  }\n};\n</script>\n\n<style scoped>\n.gif-container {\n  height: 200px;\n  background: black;\n  display: flex;\n  flex-wrap: no-wrap;\n}\nimg {\n  opacity: 0.3;\n}\n</style>"]}]}